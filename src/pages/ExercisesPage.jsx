// src/pages/ExercisesPage.js
import React, { useState, useMemo, useEffect } from 'react';
import { Link } from 'react-router-dom';   // ‚Üê th√™m import Link
import Navbar from './Navbar';
import Footer from './Footer';

const ExercisesPage = () => {
  // tr·∫°ng th√°i m·∫´u
  const apiKey = import.meta.env.VITE_OPENAI_API_KEY;
  const [course, setCourse] = useState('python');
  const [search, setSearch] = useState('');
  const [selectedSubtopics, setSelectedSubtopics] = useState([]);
  const [feedback, setFeedback] = useState('');
  const [isLoadingFeedback, setIsLoadingFeedback] = useState(false);

  // d·ªØ li·ªáu t·∫°m (n·∫øu b·∫°n ƒë√£ c√≥ data/exercises.js th√¨ v·∫´n d√πng m·∫£ng n√†y cho list,
  // v√† d√πng file data ch·ªâ ƒë·ªÉ detail)
  const [exercises] = useState([
    { id: 1, code: 'PY001', title: 'Hello World',       group: 'C∆° b·∫£n',    subtopic: 'Nh·∫≠p xu·∫•t', difficulty: 'D·ªÖ' },
    { id: 2, code: 'PY002', title: 'T√≠nh t·ªïng d√£y s·ªë',  group: 'Gi·∫£i thu·∫≠t', subtopic: 'V√≤ng l·∫∑p', difficulty: 'Trung b√¨nh' },
    { id: 3, code: 'PY003', title: 'Ki·ªÉm tra s·ªë ch√≠nh ph∆∞∆°ng', group: 'To√°n h·ªçc', subtopic: 'S·ªë h·ªçc', difficulty: 'Kh√≥' },
    { id: 4, code: 'PY004', title: 'T√≠nh giai th·ª´a', group: 'To√°n h·ªçc', subtopic: 'S·ªë h·ªçc', difficulty: 'Kh√≥' }
  ]);

  // danh s√°ch kh√≥a h·ªçc
  const courses = [
    { value: 'python', label: 'Python c∆° b·∫£n' }
  ];

  // danh s√°ch ch·ªß ƒë·ªÅ con duy nh·∫•t
  const subtopics = useMemo(
    () => [...new Set(exercises.map(ex => ex.subtopic))],
    [exercises]
  );

  // l·ªçc b√†i t·∫≠p theo t√¨m ki·∫øm v√† ch·ªß ƒë·ªÅ con
  const filteredExercises = useMemo(() => {
    return exercises.filter(ex => {
      const matchesSearch =
        ex.code.toLowerCase().includes(search.toLowerCase()) ||
        ex.title.toLowerCase().includes(search.toLowerCase());
      const matchesSubtopic =
        selectedSubtopics.length === 0 ||
        selectedSubtopics.includes(ex.subtopic);
      return matchesSearch && matchesSubtopic;
    });
  }, [exercises, search, selectedSubtopics]);

  // Function to generate learning feedback using OpenAI
  const generateFeedback = async () => {
    setIsLoadingFeedback(true);
    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
          model: "gpt-4.1-nano",
          messages: [{
            role: "user",
            content: `B·∫°n l√† m·ªôt ng∆∞·ªùi c·ªë v·∫•n h·ªçc t·∫≠p th√¢n thi·ªán v√† nhi·ªát t√¨nh. H√£y ƒë∆∞a ra m·ªôt l·ªùi nh·∫Øn ng·∫Øn g·ªçn, t√≠ch c·ª±c v√† kh√≠ch l·ªá cho ng∆∞·ªùi h·ªçc d·ª±a tr√™n:
              - Kh√≥a h·ªçc hi·ªán t·∫°i: ${course}
              - C√°c ch·ªß ƒë·ªÅ ƒëang h·ªçc: ${selectedSubtopics.join(', ')}
              - S·ªë b√†i t·∫≠p ƒë√£ l√†m: ${filteredExercises.length}
              
              Y√™u c·∫ßu:
              1. S·ª≠ d·ª•ng ng√¥n ng·ªØ th√¢n thi·ªán, g·∫ßn g≈©i
              2. T·∫≠p trung v√†o s·ª± ti·∫øn b·ªô v√† ti·ªÅm nƒÉng
              3. ƒê∆∞a ra 1-2 g·ª£i √Ω nh·ªè ƒë·ªÉ ti·∫øp t·ª•c ph√°t tri·ªÉn
              4. K·∫øt th√∫c b·∫±ng m·ªôt c√¢u kh√≠ch l·ªá
              5. Gi·ªõi h·∫°n trong 3-4 c√¢u ng·∫Øn g·ªçn
              6. S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ t·∫°o c·∫£m gi√°c vui v·∫ª`
          }]
        })
      });

      const data = await response.json();
      setFeedback(data.choices[0].message.content);
    } catch (error) {
      console.error('Error generating feedback:', error);
      setFeedback('Kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
    setIsLoadingFeedback(false);
  };

  // Generate feedback when exercises or selections change
  useEffect(() => {
    if (filteredExercises.length > 0) {
      generateFeedback();
    }
  }, [filteredExercises, selectedSubtopics, course]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-blue-100">
      <Navbar />

      <main className="max-w-[95%] mx-auto px-4 py-8 mt-16">
        {/* Ti√™u ƒë·ªÅ */}
        <h1 className="text-3xl font-bold text-blue-800 mb-8 pb-4 border-b border-blue-200">
          Danh s√°ch b√†i t·∫≠p
        </h1>

        <div className="flex flex-col lg:flex-row gap-8 items-start">
          {/* --------- Left panel --------- */}
          <div className="flex-1 min-w-[320px] bg-white/80 backdrop-blur-sm rounded-xl shadow-lg p-6 hover:shadow-xl transition-all duration-300">
            {/* M√¥n h·ªçc */}
            <div className="mb-6">
              <label className="block text-blue-600 font-semibold mb-2">M√¥n h·ªçc:</label>
              <select
                value={course}
                onChange={e => setCourse(e.target.value)}
                className="w-full px-4 py-2 rounded-lg border border-blue-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-300 bg-white/90"
              >
                <option value="">Ch·ªçn kh√≥a h·ªçc</option>
                {courses.map(c => (
                  <option key={c.value} value={c.value}>{c.label}</option>
                ))}
              </select>
            </div>

            {/* T√¨m ki·∫øm */}
            <div className="relative mb-6">
              <span className="absolute left-4 top-1/2 transform -translate-y-1/2 text-blue-400">
                üîç
              </span>
              <input
                type="text"
                placeholder="T√¨m ki·∫øm theo m√£ ho·∫∑c ti√™u ƒë·ªÅ..."
                value={search}
                onChange={e => setSearch(e.target.value)}
                className="w-full pl-12 pr-4 py-2 rounded-lg border border-blue-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-300 bg-white/90"
              />
            </div>

            {/* B·∫£ng d·ªØ li·ªáu */}
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr>
                    {['M√£','Ti√™u ƒë·ªÅ','Nh√≥m','Ch·ªß ƒë·ªÅ con','ƒê·ªô kh√≥'].map(col => (
                      <th key={col} className="px-4 py-3 bg-gradient-to-r from-blue-600 to-blue-700 text-white font-semibold text-left rounded-t-lg">
                        {col}
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody>
                  {filteredExercises.length === 0 ? (
                    <tr>
                      <td colSpan="5" className="text-center py-12 text-gray-500">
                        <div className="text-4xl mb-2">üóÉÔ∏è</div>
                        Kh√¥ng c√≥ d·ªØ li·ªáu
                      </td>
                    </tr>
                  ) : (
                    filteredExercises.map(ex => (
                      <tr key={ex.id} className="hover:bg-blue-50 transition-colors duration-200">
                        <td className="px-4 py-3 border-b border-blue-100">
                          <Link to={`/exercises/${ex.code}`} className="text-blue-600 hover:text-blue-700 transition-colors duration-200">
                            {ex.code}
                          </Link>
                        </td>
                        <td className="px-4 py-3 border-b border-blue-100">
                          <Link to={`/exercises/${ex.code}`} className="text-gray-800 hover:text-blue-600 transition-colors duration-200">
                            {ex.title}
                          </Link>
                        </td>
                        <td className="px-4 py-3 border-b border-blue-100">{ex.group}</td>
                        <td className="px-4 py-3 border-b border-blue-100">{ex.subtopic}</td>
                        <td className="px-4 py-3 border-b border-blue-100">{ex.difficulty}</td>
                      </tr>
                    ))
                  )}
                </tbody>
              </table>
            </div>
          </div>

          {/* --------- Right sidebar --------- */}
          <div className="w-full lg:w-96 space-y-6">
            {/* B·ªô l·ªçc ƒê·ªô kh√≥ & Ch·ªß ƒë·ªÅ con */}
            <div className="bg-white/80 backdrop-blur-sm rounded-xl shadow-lg p-6 hover:shadow-xl transition-all duration-300">
              <details open className="mb-6">
                <summary className="text-blue-600 font-semibold cursor-pointer mb-4">
                  ƒê·ªô kh√≥
                </summary>
                <button className="w-full px-4 py-2 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-lg font-medium shadow-md hover:shadow-lg transition-all duration-300 hover:-translate-y-0.5">
                  Ch·ªçn t·∫•t c·∫£
                </button>
              </details>
              <hr className="border-blue-100 my-4" />
              <details open>
                <summary className="text-blue-600 font-semibold cursor-pointer mb-4">
                  Ch·ªß ƒë·ªÅ con
                </summary>
                <div className="space-y-2">
                  {subtopics.map(topic => (
                    <label key={topic} className="flex items-center space-x-2 text-gray-700 hover:text-blue-600 transition-colors duration-200">
                      <input
                        type="checkbox"
                        checked={selectedSubtopics.includes(topic)}
                        onChange={() => {
                          setSelectedSubtopics(prev =>
                            prev.includes(topic)
                              ? prev.filter(t => t !== topic)
                              : [...prev, topic]
                          );
                        }}
                        className="rounded border-blue-300 text-blue-600 focus:ring-blue-500"
                      />
                      <span>{topic}</span>
                    </label>
                  ))}
                  {subtopics.length > 0 && (
                    <button 
                      onClick={() => setSelectedSubtopics(subtopics)}
                      className="w-full mt-4 px-4 py-2 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-lg font-medium shadow-md hover:shadow-lg transition-all duration-300 hover:-translate-y-0.5"
                    >
                      Ch·ªçn t·∫•t c·∫£
                    </button>
                  )}
                </div>
              </details>
            </div>
          </div>
        </div>

        {/* --------- Learning Progress Feedback Section --------- */}
        <div className="mt-12 mb-8">
          <div className="bg-gradient-to-br from-blue-50 to-white rounded-xl shadow-lg p-8 max-w-4xl mx-auto border border-blue-100 hover:shadow-xl transition-all duration-300">
            <div className="flex items-center gap-4 mb-6">
              <div className="bg-gradient-to-r from-blue-600 to-blue-700 rounded-full w-12 h-12 flex items-center justify-center text-2xl text-white">
                üí™
              </div>
              <h2 className="text-2xl font-bold text-blue-600">
                L·ªùi nh·∫Øn t·ª´ ng∆∞·ªùi c·ªë v·∫•n
              </h2>
            </div>
            
            {isLoadingFeedback ? (
              <div className="text-center py-8 bg-white/80 backdrop-blur-sm rounded-lg border border-blue-100">
                <div className="text-4xl mb-4 animate-pulse">‚ú®</div>
                <div className="text-gray-600 font-medium">
                  ƒêang chu·∫©n b·ªã l·ªùi nh·∫Øn ƒë·∫∑c bi·ªát cho b·∫°n...
                </div>
              </div>
            ) : feedback ? (
              <div className="bg-white/80 backdrop-blur-sm p-6 rounded-lg border border-blue-100 text-gray-700 leading-relaxed">
                {feedback}
              </div>
            ) : (
              <div className="text-center py-8 bg-white/80 backdrop-blur-sm rounded-lg border border-dashed border-blue-200">
                <div className="text-4xl mb-3">üåü</div>
                <p className="text-gray-600">
                  H√£y b·∫Øt ƒë·∫ßu h·ªçc t·∫≠p ƒë·ªÉ nh·∫≠n l·ªùi nh·∫Øn t·ª´ ng∆∞·ªùi c·ªë v·∫•n c·ªßa b·∫°n
                </p>
              </div>
            )}
            <div className="text-center mt-6">
              <button
                onClick={generateFeedback}
                disabled={isLoadingFeedback}
                className="px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-lg font-medium shadow-md hover:shadow-lg transition-all duration-300 hover:-translate-y-0.5 disabled:opacity-50 disabled:cursor-not-allowed inline-flex items-center gap-2"
              >
                <span>üîÑ</span>
                {isLoadingFeedback ? 'ƒêang c·∫≠p nh·∫≠t...' : 'Nh·∫≠n l·ªùi nh·∫Øn m·ªõi'}
              </button>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default ExercisesPage;
